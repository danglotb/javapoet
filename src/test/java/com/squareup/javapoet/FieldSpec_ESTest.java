/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 19 09:02:17 GMT 2017
 */

package com.squareup.javapoet;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.FieldSpec;
import com.squareup.javapoet.TypeName;
import com.squareup.javapoet.TypeSpec;
import java.lang.reflect.Type;
import javax.lang.model.element.Modifier;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldSpec_ESTest extends FieldSpec_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<TypeSpec.Kind> class0 = TypeSpec.Kind.class;
      ClassName className0 = ClassName.get(class0);
      Modifier[] modifierArray0 = new Modifier[6];
      FieldSpec.Builder fieldSpec_Builder0 = FieldSpec.builder((TypeName) className0, "GLpis", modifierArray0);
      FieldSpec.Builder fieldSpec_Builder1 = fieldSpec_Builder0.initializer("GLpis", (Object[]) modifierArray0);
      FieldSpec fieldSpec0 = fieldSpec_Builder1.build();
      // Undeclared exception!
      try { 
        fieldSpec_Builder0.initializer(fieldSpec0.initializer);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // initializer was already set
         //
         verifyException("com.squareup.javapoet.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TypeName typeName0 = TypeName.VOID;
      Modifier[] modifierArray0 = new Modifier[3];
      FieldSpec.Builder fieldSpec_Builder0 = FieldSpec.builder((TypeName) typeName0.OBJECT, "syntax", modifierArray0);
      FieldSpec fieldSpec0 = fieldSpec_Builder0.build();
      boolean boolean0 = fieldSpec0.equals(fieldSpec_Builder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Modifier[] modifierArray0 = new Modifier[1];
      Modifier modifier0 = Modifier.STRICTFP;
      FieldSpec.Builder fieldSpec_Builder0 = FieldSpec.builder((Type) class0, "rI", modifierArray0);
      FieldSpec fieldSpec0 = fieldSpec_Builder0.build();
      boolean boolean0 = fieldSpec0.hasModifier(modifier0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TypeName typeName0 = TypeName.INT;
      Modifier[] modifierArray0 = new Modifier[8];
      Modifier modifier0 = Modifier.PRIVATE;
      modifierArray0[0] = modifier0;
      FieldSpec.Builder fieldSpec_Builder0 = FieldSpec.builder(typeName0, "missingJavadocCommentsVisibility", modifierArray0);
      FieldSpec fieldSpec0 = fieldSpec_Builder0.build();
      boolean boolean0 = fieldSpec0.hasModifier(modifier0);
      assertTrue(boolean0);
  }
}
