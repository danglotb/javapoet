/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 19 09:00:38 GMT 2017
 */

package com.squareup.javapoet;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.squareup.javapoet.AnnotationSpec;
import java.lang.annotation.Annotation;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AnnotationSpec_ESTest extends AnnotationSpec_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      AnnotationSpec.Builder annotationSpec_Builder0 = AnnotationSpec.builder(class0);
      AnnotationSpec annotationSpec0 = annotationSpec_Builder0.build();
      boolean boolean0 = annotationSpec0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      AnnotationSpec.Builder annotationSpec_Builder0 = AnnotationSpec.builder(class0);
      AnnotationSpec annotationSpec0 = annotationSpec_Builder0.build();
      boolean boolean0 = annotationSpec0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Annotation annotation0 = mock(Annotation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(annotation0).toString();
      doReturn(class0, class0, (Class) null).when(annotation0).annotationType();
      // Undeclared exception!
      try { 
        AnnotationSpec.get(annotation0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Reflecting null failed!
         //
         verifyException("com.squareup.javapoet.AnnotationSpec", e);
      }
  }
}
