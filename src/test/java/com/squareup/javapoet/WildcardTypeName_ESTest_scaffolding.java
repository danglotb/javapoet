/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Wed Apr 19 09:03:44 GMT 2017
 */

package com.squareup.javapoet;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

@EvoSuiteClassExclude
public class WildcardTypeName_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "com.squareup.javapoet.WildcardTypeName"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    /*No java.lang.System property to set*/
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(WildcardTypeName_ESTest_scaffolding.class.getClassLoader() ,
      "com.squareup.javapoet.TypeVariableName",
      "com.squareup.javapoet.Util",
      "com.squareup.javapoet.TypeName",
      "com.squareup.javapoet.WildcardTypeName",
      "com.squareup.javapoet.ClassName",
      "com.squareup.javapoet.ParameterizedTypeName",
      "com.squareup.javapoet.ArrayTypeName"
    );
  } 

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(WildcardTypeName_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "com.squareup.javapoet.Util",
      "com.squareup.javapoet.ClassName",
      "com.squareup.javapoet.TypeName",
      "com.squareup.javapoet.CodeWriter",
      "com.squareup.javapoet.CodeBlock",
      "org.eclipse.jdt.internal.compiler.lookup.Binding",
      "org.eclipse.jdt.internal.compiler.lookup.TypeConstants",
      "org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding",
      "org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding",
      "org.eclipse.jdt.internal.compiler.lookup.TypeBinding",
      "org.eclipse.jdt.internal.compiler.apt.model.PrimitiveTypeImpl",
      "com.squareup.javapoet.TypeName$2",
      "org.eclipse.jdt.internal.compiler.ast.ASTNode",
      "org.eclipse.jdt.internal.compiler.ast.Statement",
      "org.eclipse.jdt.internal.compiler.ast.OperatorExpression",
      "org.eclipse.jdt.internal.compiler.apt.model.NoTypeImpl",
      "org.eclipse.jdt.core.compiler.CharOperation",
      "org.eclipse.jdt.internal.compiler.impl.CompilerOptions",
      "org.eclipse.jdt.internal.compiler.apt.model.Factory",
      "org.eclipse.jdt.internal.compiler.ast.SwitchStatement",
      "org.eclipse.jdt.internal.compiler.ast.ExpressionContext$1",
      "org.eclipse.jdt.internal.compiler.ast.ExpressionContext$2",
      "org.eclipse.jdt.internal.compiler.ast.ExpressionContext$3",
      "org.eclipse.jdt.internal.compiler.ast.ExpressionContext$4",
      "org.eclipse.jdt.internal.compiler.ast.ExpressionContext",
      "org.eclipse.jdt.internal.compiler.apt.dispatch.BatchAnnotationProcessorManager",
      "org.eclipse.jdt.internal.compiler.batch.Main",
      "org.eclipse.jdt.internal.compiler.batch.Main$Logger",
      "org.eclipse.jdt.internal.compiler.impl.IrritantSet",
      "org.eclipse.jdt.internal.compiler.Compiler",
      "org.eclipse.jdt.internal.compiler.util.Util",
      "org.eclipse.jdt.internal.compiler.batch.Main$ResourceBundleFactory",
      "org.eclipse.jdt.internal.compiler.apt.model.ElementsImpl",
      "org.eclipse.jdt.internal.compiler.apt.model.TypesImpl",
      "org.eclipse.jdt.internal.compiler.tool.EclipseCompilerImpl",
      "org.eclipse.jdt.internal.compiler.apt.util.EclipseFileManager",
      "org.eclipse.jdt.internal.compiler.parser.CommitRollbackParser",
      "org.eclipse.jdt.internal.compiler.parser.Parser"
    );
  }
}
