/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 19 08:54:35 GMT 2017
 */

package com.squareup.javapoet;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.TypeName;
import com.squareup.javapoet.TypeSpec;
import com.squareup.javapoet.TypeVariableName;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import javax.lang.model.element.Modifier;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeSpec_ESTest extends TypeSpec_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TypeSpec.Builder typeSpec_Builder0 = TypeSpec.enumBuilder("bY");
      // Undeclared exception!
      try { 
        typeSpec_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // at least one enum constant is required for bY
         //
         verifyException("com.squareup.javapoet.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TypeSpec.Builder typeSpec_Builder0 = TypeSpec.interfaceBuilder("H");
      TypeSpec typeSpec0 = typeSpec_Builder0.build();
      Class<String> class0 = String.class;
      ClassName className0 = ClassName.get(class0);
      TypeSpec.Builder typeSpec_Builder1 = TypeSpec.enumBuilder(className0);
      // Undeclared exception!
      try { 
        typeSpec_Builder1.addEnumConstant("H", typeSpec0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // enum constants must have anonymous type arguments
         //
         verifyException("com.squareup.javapoet.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TypeSpec.Builder typeSpec_Builder0 = TypeSpec.enumBuilder("CLASS");
      // Undeclared exception!
      try { 
        typeSpec_Builder0.addSuperinterface((TypeName) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // superinterface == null
         //
         verifyException("com.squareup.javapoet.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      TypeSpec.Builder typeSpec_Builder0 = TypeSpec.anonymousClassBuilder("0xffffffff", objectArray0);
      TypeName typeName0 = TypeName.CHAR;
      // Undeclared exception!
      try { 
        typeSpec_Builder0.superclass(typeName0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // superclass may not be a primitive
         //
         verifyException("com.squareup.javapoet.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ClassName className0 = TypeName.OBJECT;
      Class<Method> class0 = Method.class;
      TypeSpec.Builder typeSpec_Builder0 = TypeSpec.enumBuilder(className0);
      // Undeclared exception!
      try { 
        typeSpec_Builder0.superclass((Type) class0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // only classes have super classes, not ENUM
         //
         verifyException("com.squareup.javapoet.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      TypeSpec.Builder typeSpec_Builder0 = TypeSpec.anonymousClassBuilder(" implements", objectArray0);
      // Undeclared exception!
      try { 
        typeSpec_Builder0.addTypeVariable((TypeVariableName) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // forbidden on anonymous types.
         //
         verifyException("com.squareup.javapoet.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      TypeSpec.Builder typeSpec_Builder0 = TypeSpec.anonymousClassBuilder("(c.C5j", objectArray0);
      TypeSpec typeSpec0 = typeSpec_Builder0.build();
      // Undeclared exception!
      try { 
        typeSpec_Builder0.addTypeVariables(typeSpec0.typeVariables);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // forbidden on anonymous types.
         //
         verifyException("com.squareup.javapoet.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      TypeSpec.Builder typeSpec_Builder0 = TypeSpec.anonymousClassBuilder("qbJ70N.Q1T7?`igN", objectArray0);
      Modifier[] modifierArray0 = new Modifier[2];
      // Undeclared exception!
      try { 
        typeSpec_Builder0.addModifiers(modifierArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // forbidden on anonymous types.
         //
         verifyException("com.squareup.javapoet.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeSpec.classBuilder("Z)jcK2g Ly:t\t");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // not a valid name: Z)jcK2g Ly:t\t
         //
         verifyException("com.squareup.javapoet.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      TypeSpec.Builder typeSpec_Builder0 = TypeSpec.interfaceBuilder("H");
      TypeSpec typeSpec0 = typeSpec_Builder0.build();
      Modifier modifier0 = Modifier.PRIVATE;
      boolean boolean0 = typeSpec0.hasModifier(modifier0);
      assertFalse(boolean0);
  }
}
