/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 19 09:08:36 GMT 2017
 */

package com.squareup.javapoet;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.squareup.javapoet.Util;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import javax.lang.model.element.Modifier;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Util_ESTest extends Util_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = Util.stringLiteralWithDoubleQuotes("d", "!");
      assertEquals("\"d\"", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = Util.stringLiteralWithDoubleQuotes("]/>LiA[*`#_0K", ">RV6n_GE");
      assertEquals("\"]/>LiA[*`#_0K\"", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = Util.stringLiteralWithDoubleQuotes("p&g/GEVgA 1II'p", (String) null);
      assertEquals("\"p&g/GEVgA 1\\u007fII'p\"", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = Util.characterLiteralWithoutSingleQuotes('\'');
      assertEquals("\\'", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = Util.characterLiteralWithoutSingleQuotes('\"');
      assertEquals("\"", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = Util.stringLiteralWithDoubleQuotes("\"\n", "\"\n");
      assertEquals("\"\\\"\\n\"", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Modifier> linkedList0 = new LinkedList<Modifier>();
      boolean boolean0 = Util.hasDefaultModifier(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Modifier> linkedList0 = new LinkedList<Modifier>();
      Modifier modifier0 = Modifier.DEFAULT;
      linkedList0.add(modifier0);
      boolean boolean0 = Util.hasDefaultModifier(linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.offer("y1RTs<T+$y");
      linkedList0.add("y1RTs<T+$y");
      String string0 = Util.join("y1RTs<T+$y", linkedList0);
      assertEquals("y1RTs<T+$yy1RTs<T+$yy1RTs<T+$y", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        Util.checkNotNull((String) null, "", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // 
         //
         verifyException("com.squareup.javapoet.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedHashSet<Modifier> linkedHashSet0 = new LinkedHashSet<Modifier>();
      Modifier[] modifierArray0 = new Modifier[1];
      // Undeclared exception!
      try { 
        Util.requireExactlyOneOf(linkedHashSet0, modifierArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // modifiers [] must contain one of [null]
         //
         verifyException("com.squareup.javapoet.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      hashMap0.put("Fh39[`>(n0ql[#TX8", linkedList0);
      Map<String, List<String>> map0 = Util.immutableMultimap((Map<String, List<String>>) hashMap0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("bQWU-n=x8JemNkht<");
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      hashMap0.put("bQWU-n=x8JemNkht<", linkedList0);
      Map<String, List<String>> map0 = Util.immutableMultimap((Map<String, List<String>>) hashMap0);
      assertFalse(map0.isEmpty());
  }
}
