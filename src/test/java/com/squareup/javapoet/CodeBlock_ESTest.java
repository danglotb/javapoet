/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 19 09:11:34 GMT 2017
 */

package com.squareup.javapoet;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.squareup.javapoet.CodeBlock;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CodeBlock_ESTest extends CodeBlock_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "?R{?7$RP1WwY|}I";
      objectArray0[1] = (Object) "?R{?7$RP1WwY|}I";
      objectArray0[2] = (Object) "?R{?7$RP1WwY|}I";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "?R{?7$RP1WwY|}I";
      // Undeclared exception!
      try { 
        CodeBlock.of("?R{?7$RP1WwY|}I", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid format string: '?R{?7$RP1WwY|}I'
         //
         verifyException("com.squareup.javapoet.CodeBlock$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      CodeBlock codeBlock0 = CodeBlock.of("", objectArray0);
      codeBlock0.hashCode();
      CodeBlock codeBlock1 = CodeBlock.of("Boolean", objectArray0);
      CodeBlock.builder();
      boolean boolean0 = codeBlock0.isEmpty();
      Object object0 = new Object();
      boolean boolean1 = codeBlock0.equals(object0);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = codeBlock0.equals(codeBlock1);
      assertFalse(codeBlock1.isEmpty());
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CodeBlock.Builder codeBlock_Builder0 = CodeBlock.builder();
      CodeBlock.Builder codeBlock_Builder1 = codeBlock_Builder0.unindent();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) codeBlock_Builder1;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "N5b$iEKt~a";
      objectArray0[3] = (Object) codeBlock_Builder0;
      objectArray0[4] = (Object) codeBlock_Builder1;
      objectArray0[5] = (Object) codeBlock_Builder0;
      objectArray0[6] = (Object) codeBlock_Builder1;
      // Undeclared exception!
      try { 
        codeBlock_Builder1.endControlFlow("N5b$iEKt~a", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid format string: '} N5b$iEKt~a;
         // '
         //
         verifyException("com.squareup.javapoet.CodeBlock$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CodeBlock.Builder codeBlock_Builder0 = CodeBlock.builder();
      String string0 = " & $T";
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) " & $T";
      objectArray0[1] = (Object) " & $T";
      objectArray0[2] = (Object) " & $T";
      // Undeclared exception!
      try { 
        codeBlock_Builder0.beginControlFlow(" & $T", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // expected type but was  & $T
         //
         verifyException("com.squareup.javapoet.CodeBlock$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      CodeBlock codeBlock0 = CodeBlock.of("expected name but was ", objectArray0);
      CodeBlock.Builder codeBlock_Builder0 = codeBlock0.toBuilder();
      codeBlock_Builder0.endControlFlow();
      CodeBlock.Builder codeBlock_Builder1 = codeBlock_Builder0.endControlFlow("expected name but was ", objectArray0);
      CodeBlock.Builder codeBlock_Builder2 = codeBlock_Builder1.unindent();
      codeBlock_Builder2.unindent();
      codeBlock_Builder2.indent();
      codeBlock_Builder2.add("expected name but was ", objectArray0);
      CodeBlock.Builder codeBlock_Builder3 = codeBlock_Builder1.beginControlFlow("_8/\"a\"PQ1#%S// ", objectArray0);
      codeBlock0.isEmpty();
      codeBlock0.equals((Object) null);
      String string0 = "p{wg8Z0";
      codeBlock_Builder1.add("p{wg8Z0", objectArray0);
      codeBlock0.equals((Object) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      codeBlock_Builder0.nextControlFlow("bG)k^})\"Bp[tr1GK~g", objectArray0);
      // Undeclared exception!
      try { 
        codeBlock_Builder3.addNamed("3s/X{$MeXW1:<VJ", hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unknown format $M at 6 in '3s/X{$MeXW1:<VJ'
         //
         verifyException("com.squareup.javapoet.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CodeBlock.Builder codeBlock_Builder0 = CodeBlock.builder();
      String string0 = "D^\\4oRKI\"";
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) codeBlock_Builder0;
      CodeBlock codeBlock0 = CodeBlock.of("D^\u0004oRKI\"", objectArray0);
      CodeBlock.Builder codeBlock_Builder1 = codeBlock_Builder0.add(codeBlock0);
      CodeBlock.Builder codeBlock_Builder2 = codeBlock_Builder1.endControlFlow("D^\u0004oRKI\"", objectArray0);
      codeBlock_Builder1.build();
      CodeBlock.Builder codeBlock_Builder3 = codeBlock_Builder2.unindent();
      CodeBlock.Builder codeBlock_Builder4 = codeBlock_Builder3.endControlFlow();
      String string1 = "'pGDnk2 ";
      Object[] objectArray1 = new Object[0];
      codeBlock_Builder4.nextControlFlow("'pGDnk2 ", objectArray1);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      codeBlock_Builder4.nextControlFlow("'pGDnk2 ", objectArray1);
      String string2 = "tQx*c#x\"JqtiYn6B1M";
      Object object0 = new Object();
      hashMap0.put("tQx*c#x\"JqtiYn6B1M", object0);
      // Undeclared exception!
      try { 
        codeBlock_Builder4.addStatement("$", objectArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // dangling format characters in '$'
         //
         verifyException("com.squareup.javapoet.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "argument '%s' must start with a lowercase character";
      objectArray0[1] = (Object) "argument '%s' must start with a lowercase character";
      objectArray0[2] = (Object) "argument '%s' must start with a lowercase character";
      objectArray0[3] = (Object) "argument '%s' must start with a lowercase character";
      objectArray0[4] = (Object) "argument '%s' must start with a lowercase character";
      objectArray0[5] = (Object) "argument '%s' must start with a lowercase character";
      objectArray0[6] = (Object) "argument '%s' must start with a lowercase character";
      objectArray0[7] = (Object) "argument '%s' must start with a lowercase character";
      Object object0 = new Object();
      objectArray0[8] = object0;
      CodeBlock codeBlock0 = CodeBlock.of("argument '%s' must start with a lowercase character", objectArray0);
      codeBlock0.equals("~Abo(#5,q");
      codeBlock0.equals(object0);
      CodeBlock.Builder codeBlock_Builder0 = CodeBlock.builder();
      CodeBlock.Builder codeBlock_Builder1 = codeBlock_Builder0.unindent();
      CodeBlock.Builder codeBlock_Builder2 = codeBlock_Builder1.add("q5`+`", objectArray0);
      codeBlock_Builder2.endControlFlow();
      CodeBlock.Builder codeBlock_Builder3 = codeBlock_Builder2.indent();
      // Undeclared exception!
      try { 
        codeBlock_Builder3.addStatement((String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.javapoet.CodeBlock$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "($0)|R";
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "($0)|R";
      objectArray0[1] = (Object) "($0)|R";
      objectArray0[2] = (Object) "($0)|R";
      objectArray0[3] = (Object) "($0)|R";
      // Undeclared exception!
      try { 
        CodeBlock.of("($0)|R", objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.squareup.javapoet.CodeBlock$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "zBk>aOt,";
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "zBk>aOt,";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "zBk>aOt,";
      Object object1 = new Object();
      objectArray0[3] = object1;
      Object object2 = new Object();
      objectArray0[4] = object2;
      objectArray0[5] = (Object) "zBk>aOt,";
      objectArray0[6] = (Object) "zBk>aOt,";
      Object object3 = new Object();
      objectArray0[7] = object3;
      CodeBlock codeBlock0 = CodeBlock.of("zBk>aOt,", objectArray0);
      codeBlock0.equals(object0);
      codeBlock0.isEmpty();
      CodeBlock.Builder codeBlock_Builder0 = CodeBlock.builder();
      CodeBlock.Builder codeBlock_Builder1 = codeBlock_Builder0.endControlFlow("zBk>aOt,", objectArray0);
      CodeBlock.Builder codeBlock_Builder2 = codeBlock_Builder1.endControlFlow();
      codeBlock_Builder2.indent();
      // Undeclared exception!
      try { 
        codeBlock_Builder2.beginControlFlow("$L", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unused arguments: expected 1, received 8
         //
         verifyException("com.squareup.javapoet.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      CodeBlock codeBlock0 = CodeBlock.of("w2!1zQ~9|+V?Igm", objectArray0);
      int int0 = 60;
      Integer integer0 = new Integer(60);
      codeBlock0.equals(integer0);
      CodeBlock.Builder codeBlock_Builder0 = CodeBlock.builder();
      CodeBlock codeBlock1 = CodeBlock.of("x|(GJo!urW-Yh5W8Hu", objectArray0);
      codeBlock0.equals("x|(GJo!urW-Yh5W8Hu");
      codeBlock_Builder0.endControlFlow();
      CodeBlock.Builder codeBlock_Builder1 = codeBlock_Builder0.indent();
      CodeBlock.Builder codeBlock_Builder2 = codeBlock_Builder1.beginControlFlow("w2!1zQ~9|+V?Igm", objectArray0);
      CodeBlock.Builder codeBlock_Builder3 = codeBlock_Builder2.add(codeBlock0);
      codeBlock_Builder1.add(codeBlock1);
      String string0 = "";
      String string1 = "";
      // Undeclared exception!
      try { 
        codeBlock_Builder3.nextControlFlow(" & $T", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // expected type but was null
         //
         verifyException("com.squareup.javapoet.CodeBlock$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      CodeBlock codeBlock0 = CodeBlock.of("w2!1zQ~9|+V?Igm", objectArray0);
      int int0 = 60;
      Integer integer0 = new Integer(60);
      codeBlock0.equals(integer0);
      CodeBlock.Builder codeBlock_Builder0 = CodeBlock.builder();
      CodeBlock.Builder codeBlock_Builder1 = codeBlock_Builder0.add("5hjj.Y,D\"7/YZv", objectArray0);
      CodeBlock codeBlock1 = CodeBlock.of("x|(GJo!upW-Yh5W8Hu", objectArray0);
      CodeBlock.Builder codeBlock_Builder2 = codeBlock_Builder1.endControlFlow();
      CodeBlock.Builder codeBlock_Builder3 = codeBlock_Builder2.indent();
      CodeBlock.Builder codeBlock_Builder4 = codeBlock_Builder3.beginControlFlow("w2!1zQ~9|+V?Igm", objectArray0);
      CodeBlock.Builder codeBlock_Builder5 = codeBlock_Builder4.add(codeBlock0);
      codeBlock_Builder3.add(codeBlock1);
      String string0 = "";
      String string1 = "";
      // Undeclared exception!
      try { 
        codeBlock_Builder5.nextControlFlow(" & $T", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index 1 for '$T' not in range (received 0 arguments)
         //
         verifyException("com.squareup.javapoet.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      Object object1 = new Object();
      objectArray0[4] = object1;
      Object object2 = new Object();
      objectArray0[5] = object2;
      objectArray0[6] = (Object) null;
      // Undeclared exception!
      try { 
        CodeBlock.of((String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.javapoet.CodeBlock$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CodeBlock.Builder codeBlock_Builder0 = CodeBlock.builder();
      String string0 = "";
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      CodeBlock.Builder codeBlock_Builder1 = codeBlock_Builder0.addNamed("", hashMap0);
      Object[] objectArray0 = null;
      // Undeclared exception!
      try { 
        codeBlock_Builder1.nextControlFlow("", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.javapoet.CodeBlock$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      CodeBlock codeBlock0 = CodeBlock.of("", objectArray0);
      codeBlock0.hashCode();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      CodeBlock codeBlock1 = CodeBlock.of("Boolean", objectArray0);
      assertFalse(codeBlock1.isEmpty());
      
      boolean boolean0 = codeBlock0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = ";\n";
      Object[] objectArray0 = new Object[0];
      CodeBlock codeBlock0 = CodeBlock.of(";\n", objectArray0);
      CodeBlock.Builder codeBlock_Builder0 = codeBlock0.toBuilder();
      CodeBlock codeBlock1 = codeBlock_Builder0.build();
      codeBlock1.hashCode();
      CodeBlock.Builder codeBlock_Builder1 = codeBlock_Builder0.beginControlFlow(";\n", objectArray0);
      CodeBlock.Builder codeBlock_Builder2 = codeBlock_Builder1.addStatement("a D", objectArray0);
      codeBlock0.toString();
      codeBlock0.toBuilder();
      CodeBlock.Builder codeBlock_Builder3 = codeBlock_Builder2.add(";\n", objectArray0);
      codeBlock_Builder1.indent();
      codeBlock_Builder3.unindent();
      String string1 = "dangling $ at end";
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      // Undeclared exception!
      try { 
        codeBlock_Builder3.addNamed("dangling $ at end", hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unknown format $  at 10 in 'dangling $ at end'
         //
         verifyException("com.squareup.javapoet.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "p{wg8Z0";
      objectArray0[1] = (Object) "p{wg8Z0";
      objectArray0[3] = (Object) "p{wg8Z0";
      objectArray0[4] = (Object) "p{wg8Z0";
      CodeBlock codeBlock0 = CodeBlock.of("p{wg8Z0", objectArray0);
      CodeBlock.Builder codeBlock_Builder0 = codeBlock0.toBuilder();
      CodeBlock.Builder codeBlock_Builder1 = codeBlock_Builder0.addStatement("$$, $>, $<, $[, $], and $W may not have an index", objectArray0);
      codeBlock0.toString();
      codeBlock_Builder1.endControlFlow();
      CodeBlock.Builder codeBlock_Builder2 = codeBlock_Builder0.nextControlFlow("p{wg8Z0", objectArray0);
      CodeBlock.Builder codeBlock_Builder3 = codeBlock_Builder2.endControlFlow();
      codeBlock0.hashCode();
      codeBlock_Builder3.endControlFlow("p{wg8Z0", objectArray0);
      codeBlock_Builder2.beginControlFlow("p{wg8Z0", objectArray0);
      String string0 = "BTUwp(rQ]-!\"{6,n-";
      codeBlock_Builder2.addStatement("+!Phc9#q3", objectArray0);
      codeBlock0.hashCode();
      CodeBlock.builder();
      CodeBlock codeBlock1 = codeBlock_Builder1.build();
      // Undeclared exception!
      try { 
        codeBlock1.toString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // statement enter $[ followed by statement enter $[
         //
         verifyException("com.squareup.javapoet.Util", e);
      }
  }
}
