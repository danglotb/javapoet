/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 19 09:07:07 GMT 2017
 */

package com.squareup.javapoet;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.squareup.javapoet.TypeName;
import com.squareup.javapoet.TypeVariableName;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.lang.reflect.TypeVariable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.mockito.internal.util.reflection.GenericMetadataSupport;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeVariableName_ESTest extends TypeVariableName_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TypeVariable<Method> typeVariable0 = (TypeVariable<Method>) mock(TypeVariable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(typeVariable0).getName();
      GenericMetadataSupport.TypeVarBoundedType genericMetadataSupport_TypeVarBoundedType0 = new GenericMetadataSupport.TypeVarBoundedType(typeVariable0);
      TypeVariable typeVariable1 = genericMetadataSupport_TypeVarBoundedType0.typeVariable();
      // Undeclared exception!
      try { 
        TypeVariableName.get(typeVariable1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name == null
         //
         verifyException("com.squareup.javapoet.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TypeVariableName typeVariableName0 = TypeVariableName.get(":W!+$lw+^FEM,h$0d<B");
      TypeName[] typeNameArray0 = new TypeName[3];
      typeNameArray0[0] = (TypeName) typeVariableName0;
      typeNameArray0[1] = (TypeName) typeVariableName0;
      typeNameArray0[2] = (TypeName) typeVariableName0;
      TypeVariableName typeVariableName1 = typeVariableName0.withBounds(typeNameArray0);
      TypeVariableName typeVariableName2 = typeVariableName1.withBounds(typeVariableName0.bounds);
      assertFalse(typeVariableName2.isAnnotated());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TypeVariableName typeVariableName0 = TypeVariableName.get("h]@,*3>.a|_=");
      Type[] typeArray0 = new Type[1];
      Class<Boolean> class0 = Boolean.TYPE;
      typeArray0[0] = (Type) class0;
      // Undeclared exception!
      try { 
        typeVariableName0.withBounds(typeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid bound: boolean
         //
         verifyException("com.squareup.javapoet.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TypeVariableName typeVariableName0 = TypeVariableName.get(":W!+$lw+^FEM,h$0d<B");
      TypeName[] typeNameArray0 = new TypeName[3];
      typeNameArray0[0] = (TypeName) typeVariableName0;
      typeNameArray0[1] = (TypeName) typeVariableName0;
      typeNameArray0[2] = (TypeName) typeVariableName0;
      TypeVariableName typeVariableName1 = typeVariableName0.withBounds(typeNameArray0);
      TypeVariableName typeVariableName2 = typeVariableName1.annotated(typeVariableName0.annotations);
      assertFalse(typeVariableName2.isAnnotated());
  }
}
