/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 19 08:59:01 GMT 2017
 */

package com.squareup.javapoet;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.squareup.javapoet.CodeWriter;
import com.squareup.javapoet.ParameterSpec;
import com.squareup.javapoet.TypeName;
import java.lang.reflect.Type;
import java.util.TreeSet;
import javax.lang.model.element.Modifier;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ParameterSpec_ESTest extends ParameterSpec_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TypeName typeName0 = TypeName.SHORT;
      Modifier[] modifierArray0 = new Modifier[3];
      Modifier modifier0 = Modifier.PRIVATE;
      modifierArray0[2] = modifier0;
      ParameterSpec.Builder parameterSpec_Builder0 = ParameterSpec.builder(typeName0, "fB9Z", modifierArray0);
      ParameterSpec parameterSpec0 = parameterSpec_Builder0.build();
      boolean boolean0 = parameterSpec0.equals(modifierArray0[2]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TypeName typeName0 = TypeName.SHORT;
      Modifier[] modifierArray0 = new Modifier[3];
      ParameterSpec.Builder parameterSpec_Builder0 = ParameterSpec.builder(typeName0, "fB9Z", modifierArray0);
      ParameterSpec parameterSpec0 = parameterSpec_Builder0.build();
      boolean boolean0 = parameterSpec0.equals(modifierArray0[0]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TypeName typeName0 = TypeName.SHORT;
      Modifier[] modifierArray0 = new Modifier[3];
      Modifier modifier0 = Modifier.PRIVATE;
      modifierArray0[0] = modifier0;
      modifierArray0[1] = modifierArray0[0];
      modifierArray0[2] = modifierArray0[0];
      ParameterSpec.Builder parameterSpec_Builder0 = ParameterSpec.builder(typeName0, "fB9Z", modifierArray0);
      ParameterSpec parameterSpec0 = parameterSpec_Builder0.build();
      String string0 = parameterSpec0.toString();
      assertEquals("private short fB9Z", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TypeName typeName0 = TypeName.SHORT;
      Modifier[] modifierArray0 = new Modifier[3];
      Modifier modifier0 = Modifier.PRIVATE;
      modifierArray0[0] = modifier0;
      modifierArray0[1] = modifier0;
      modifierArray0[2] = modifier0;
      ParameterSpec.Builder parameterSpec_Builder0 = ParameterSpec.builder(typeName0, "fB9Z", modifierArray0);
      ParameterSpec parameterSpec0 = parameterSpec_Builder0.build();
      StringBuffer stringBuffer0 = new StringBuffer("protected private transient short fB9Z");
      TreeSet<String> treeSet0 = new TreeSet<String>();
      CodeWriter codeWriter0 = new CodeWriter(stringBuffer0, "protected private transient short fB9Z", treeSet0);
      // Undeclared exception!
      try { 
        parameterSpec0.emit(codeWriter0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // expected type but was null
         //
         verifyException("com.squareup.javapoet.CodeBlock$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TypeName typeName0 = TypeName.SHORT;
      Modifier[] modifierArray0 = new Modifier[3];
      Modifier modifier0 = Modifier.PRIVATE;
      ParameterSpec.Builder parameterSpec_Builder0 = ParameterSpec.builder(typeName0, "fB9Z", modifierArray0);
      ParameterSpec parameterSpec0 = parameterSpec_Builder0.build();
      boolean boolean0 = parameterSpec0.hasModifier(modifier0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Modifier[] modifierArray0 = new Modifier[3];
      ParameterSpec.Builder parameterSpec_Builder0 = ParameterSpec.builder((Type) class0, "$S", modifierArray0);
      ParameterSpec parameterSpec0 = parameterSpec_Builder0.build();
      boolean boolean0 = parameterSpec0.hasModifier(modifierArray0[1]);
      assertTrue(boolean0);
  }
}
