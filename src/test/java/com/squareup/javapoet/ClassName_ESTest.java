/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 19 08:57:01 GMT 2017
 */

package com.squareup.javapoet;

import org.junit.Test;
import static org.junit.Assert.*;
import com.squareup.javapoet.ClassName;
import java.lang.reflect.Method;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassName_ESTest extends ClassName_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ClassName className0 = ClassName.bestGuess("org.eclipse.jdt.internal.compiler.classfmt.AnnotationInfo");
      assertEquals("org.eclipse.jdt.internal.compiler.classfmt", className0.packageName());
      assertEquals("AnnotationInfo", className0.simpleName());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassName className0 = ClassName.get(class0);
      String string0 = className0.simpleName();
      assertEquals("java.lang", className0.packageName());
      assertEquals("Integer", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<Method> class0 = Method.class;
      ClassName className0 = ClassName.get(class0);
      String string0 = className0.reflectionName();
      assertEquals("java.lang.reflect", className0.packageName());
      assertEquals("java.lang.reflect.Method", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Class<Method> class0 = Method.class;
      ClassName className0 = ClassName.get(class0);
      ClassName className1 = className0.annotated(className0.annotations);
      assertEquals("java.lang.reflect", className1.packageName());
      assertFalse(className1.isAnnotated());
  }
}
